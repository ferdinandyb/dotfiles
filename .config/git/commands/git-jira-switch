#!/bin/sh

show_help() {
	cat <<EOF
Usage: git jira-switch [OPTIONS] <ticket-number> [base-branch]

Create a branch from JIRA ticket information and switch to it.

Requirements:
  - jira CLI tool (https://github.com/ankitpokhrel/jira-cli)
  - fzf (optional, for --pick mode)

Options:
  -w, --worktree        Create a worktree instead of switching branches locally
  -p, --pick            Pick from assigned non-done tickets using fzf
  -c, --clean-worktrees Clean up worktrees for closed/done tickets
  -n, --name PREFIX     Prefix for worktree name (default: repo name)
  -l, --length LENGTH   Maximum length for summary (default: 40)

Arguments:
  ticket-number         JIRA ticket number (e.g., PROJ-123)
  base-branch           Optional base branch to branch from (if omitted, 
                        defaults to origin/HEAD with --no-track)

Examples:
  git jira-switch -w -p
  git jira-switch PROJ-123
  git jira-switch --worktree PROJ-123
  git jira-switch --pick
  git jira-switch --pick develop
  git jira-switch --worktree --pick feature/main
  git jira-switch --clean-worktrees
  git jira-switch -w -n myproject PROJ-123
  git jira-switch -l 30 PROJ-123
EOF
}

WORKTREE_MODE=0
PICK_MODE=0
CLEAN_MODE=0
WORKTREE_PREFIX=""
SUMMARY_LENGTH=40

while [ $# -gt 0 ]; do
	case $1 in
	-w | --worktree)
		WORKTREE_MODE=1
		shift
		;;
	-p | --pick)
		PICK_MODE=1
		shift
		;;
	-c | --clean-worktrees)
		CLEAN_MODE=1
		shift
		;;
	-n | --name)
		if [ -z "$2" ]; then
			echo "ERROR: --name requires a prefix argument" 1>&2
			exit 1
		fi
		WORKTREE_PREFIX="$2"
		shift 2
		;;
	-l | --length)
		if [ -z "$2" ]; then
			echo "ERROR: --length requires a number argument" 1>&2
			exit 1
		fi
		if ! echo "$2" | grep -q '^[0-9]\+$'; then
			echo "ERROR: --length must be a positive number" 1>&2
			exit 1
		fi
		SUMMARY_LENGTH="$2"
		shift 2
		;;
	-h | --help)
		show_help
		exit 0
		;;
	-*)
		echo "ERROR: Unknown option $1" 1>&2
		exit 1
		;;
	*)
		break
		;;
	esac
done

clean_worktrees() {
	echo "Scanning worktrees for closed tickets..."

	# Get all worktrees except the main one
	worktrees=$(git worktree list --porcelain | grep -E "^worktree " | tail -n +2 | cut -d' ' -f2)

	if [ -z "$worktrees" ]; then
		echo "No worktrees found to clean"
		exit 0
	fi

	# Get main repo name for pattern matching
	MAIN_WORKTREE=$(git worktree list --porcelain | head -n 1 | cut -d' ' -f2)
	REPO_NAME=$(basename "$MAIN_WORKTREE")

	worktrees_to_delete=""

	for worktree in $worktrees; do
		worktree_name=$(basename "$worktree")

		# Extract ticket from worktree name pattern: prefix-TICKET-123-summary
		# This will match any prefix followed by a ticket pattern
		pattern="^[^-]\+-[A-Z]\+-[0-9]\+-"

		if echo "$worktree_name" | grep -q "$pattern"; then
			ticket=$(echo "$worktree_name" | grep -o "[A-Z]\+-[0-9]\+" | head -n 1)

			# Check ticket resolution in JIRA
			project=$(echo "$ticket" | cut -d'-' -f1)
			resolution=$(jira -p "$project" issue list -q "key = $ticket" --plain --no-headers --columns resolution 2>/dev/null | awk '{print $2}')

			# If resolution field has any value (not empty), the ticket is resolved
			if [ -n "$resolution" ]; then
				worktrees_to_delete="${worktrees_to_delete}${worktree}\n"
			fi
		fi
	done

	if [ -z "$worktrees_to_delete" ]; then
		echo "No worktrees found with closed tickets"
		exit 0
	fi

	echo "The following worktrees will be deleted:"
	echo ""
	printf "%b" "$worktrees_to_delete"
	echo ""
	printf "Delete these worktrees? (y/N): "
	read -r confirmation

	if [ "$confirmation" = "y" ] || [ "$confirmation" = "Y" ]; then
		printf "%b" "$worktrees_to_delete" | while read -r worktree_path; do
			if [ -n "$worktree_path" ]; then
				echo "Removing worktree: $worktree_path"
				git worktree remove "$worktree_path" --force
			fi
		done
		echo "Cleanup completed"
	else
		echo "Cleanup cancelled"
	fi
	exit 0
}

pick_ticket() {
	# In pick mode, first argument is base branch (optional)
	base_branch=$1

	# Get all non-done tickets assigned to current user
	echo "Fetching tickets, please wait."
	jql_query="project IS NOT EMPTY AND assignee = currentUser() AND resolution is null"
	tickets=$(jira issue list -q"$jql_query" --plain --no-headers --columns key,summary,status 2>/dev/null)

	if [ -z "$tickets" ]; then
		echo "ERROR: No assigned non-done tickets found" 1>&2
		exit 1
	fi

	# Check if fzf is available
	if command -v fzf >/dev/null 2>&1; then
		selected=$(echo "$tickets" | fzf --prompt="Select ticket: " --height=40% --reverse --border)
		if [ -z "$selected" ]; then
			echo "No ticket selected"
			exit 0
		fi
		ticket=$(echo "$selected" | awk '{print $1}')
	else
		echo "fzf not found. Available tickets:"
		echo ""
		echo "$tickets"
		echo ""
		echo "Install fzf for interactive selection, or run manually:"
		echo "  git jira-switch <ticket-number>"
		exit 1
	fi

	create_branch "$ticket" "$base_branch"
}

create_branch() {
	ticket=$1
	base_branch=$2

	project=$(echo "$ticket" | cut -d'-' -f1)

	jiraBranchName=$(jira -p $project issue list -q "key = $ticket" --plain | awk 'NR==2' | awk -F '\t' '{ print $3 }')
	echo ""
	if [ -z "$jiraBranchName" ]; then
		echo "ERROR: Please provide valid jira ticket number" 1>&2
		echo ""
		show_help
		exit 1
	fi

	jirasummary=$(echo "$jiraBranchName" | sed "s/[^[:alpha:].-]/-/g" | tr '[:upper:]' '[:lower:]' | head -c $SUMMARY_LENGTH)
	branchName="$ticket-$jirasummary"

	# Set base branch - use provided base_branch if given, otherwise origin/HEAD
	if [ -n "$base_branch" ]; then
		base_ref="$base_branch"
		track_flag="" # Track the specified base branch
	else
		base_ref="origin/HEAD"
		track_flag="--no-track" # Don't track origin/HEAD
	fi

	if [ "$WORKTREE_MODE" -eq 1 ]; then
		# Get repository name and parent directory for worktree
		# Use the main worktree path to ensure consistent naming
		MAIN_WORKTREE=$(git worktree list --porcelain | head -n 1 | cut -d' ' -f2)
		PARENT_DIR=$(dirname "$MAIN_WORKTREE")

		# Use custom prefix if provided, otherwise use repo name
		if [ -n "$WORKTREE_PREFIX" ]; then
			WORKTREE_NAME_PREFIX="$WORKTREE_PREFIX"
		else
			WORKTREE_NAME_PREFIX=$(basename "$MAIN_WORKTREE")
		fi

		WORKTREE_DIR="${PARENT_DIR}/${WORKTREE_NAME_PREFIX}-${branchName}"

		if [ -d "$WORKTREE_DIR" ]; then
			echo "ERROR: Directory $WORKTREE_DIR already exists" 1>&2
			exit 1
		fi

		if git worktree add -b "$branchName" "$WORKTREE_DIR" "$base_ref" $track_flag; then
			echo "Worktree created successfully. To switch:"
			echo "cd $WORKTREE_DIR"
		else
			echo "ERROR: Failed to create worktree" 1>&2
			exit 1
		fi
	else
		# Checkout remote branch from where you want to update.
		if ! git switch -c "$branchName" "$base_ref" $track_flag; then
			echo "ERROR: Failed to create and switch to branch" 1>&2
			exit 1
		fi
	fi
}

if [ "$CLEAN_MODE" -eq 1 ]; then
	# Clean worktrees mode - validate no other options and execute (exits on completion)
	if [ "$WORKTREE_MODE" -eq 1 ] || [ "$PICK_MODE" -eq 1 ] || [ $# -gt 0 ]; then
		echo "ERROR: --clean-worktrees cannot be combined with other options or arguments" 1>&2
		exit 1
	fi
	clean_worktrees # This function exits on completion
fi

if [ "$PICK_MODE" -eq 1 ]; then
	# Pick mode - interactive ticket selection
	pick_ticket "$1" # Pass first argument as base branch
else
	# Normal mode - validate ticket argument and create branch
	ticket=$1
	base_branch=$2

	if [ -z "$ticket" ]; then
		echo "ERROR: Please provide the jira ticket number" 1>&2
		echo ""
		show_help
		exit 1
	fi

	create_branch "$ticket" "$base_branch"
fi
