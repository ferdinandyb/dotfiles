#!/bin/bash

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
	echo "Error: Not in a git repository"
	exit 1
fi

echo "Running fetch --prune --all"
git fetch --prune --all
echo

DEFAULT_REMOTE=$(git rev-parse --abbrev-ref origin/HEAD)
DEFAULT_LOCAL=$(echo "$DEFAULT_REMOTE" | sed 's|^origin/||')

DELETE=0
REMOTE=0

list_stale_local_branches() {
	git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'
}

list_merged_local_branches() {
	git branch --merged origin/HEAD --format="%(refname:lstrip=2)" |
		grep --color=never -Ev "(${DEFAULT_LOCAL}|HEAD)"
}

delete_local_branches() {
	echo "Deleting local branches"
	echo ""
	echo "Removing branches with deleted remotes"
	echo

	for branch in $(list_stale_local_branches); do
		git branch -D $branch && echo "Deleted ${branch}"
	done

	echo "Removing merged branches"
	echo

	for branch in $(list_merged_local_branches); do
		git branch -D $branch && echo "Deleted ${branch}"
	done
}

list_squash_merged_branches() {
	# Squash-merge detection using technique from https://github.com/not-an-aardvark/git-delete-squashed
	#
	for branch in $(git branch --format="%(refname:lstrip=2)" | grep --color=never -Ev "(${DEFAULT_LOCAL}|HEAD)"); do
		# Check if branch was squash-merged by creating synthetic squash commit
		MERGE_BASE=$(git merge-base origin/HEAD "$branch" 2>/dev/null)
		if [ -n "$MERGE_BASE" ]; then
			# Create temporary commit representing squash merge, then use git cherry to check if changes exist
			CHERRY_RESULT=$(git cherry origin/HEAD $(git commit-tree $(git rev-parse "$branch^{tree}") -p "$MERGE_BASE" -m "_") 2>/dev/null)
			if [[ "$CHERRY_RESULT" == "-"* ]]; then
				echo "  $branch"
			fi
		fi
	done
}

list_merged_remote_branches() {
	git branch -r --merged origin/HEAD --format="%(refname:lstrip=3)" |
		grep --color=never -Ev "(${DEFAULT_LOCAL}|HEAD)"
}

delete_remote_branches() {
	echo "Deleting remote branches"
	echo ""

	echo "Removing merged branches"
	echo

	for branch in $(list_merged_remote_branches); do
		git push origin -d $branch && echo "Deleted ${branch}"
	done

}

while [[ $# -gt 0 ]]; do
	case $1 in
	-d | --delete)
		DELETE=1
		shift
		;;
	-r | --include-remote)
		REMOTE=1
		shift
		;;
	*)
		echo "Unknown option: $1"
		echo "Usage: $0 [-d|--delete] [-r|--include-remote]"
		exit 1
		;;
	esac
done

echo "Branches with deleted remotes:"
for branch in $(list_stale_local_branches); do
	echo "  $branch"
done
echo ""

echo "Local branches that have been merged:"
for branch in $(list_merged_local_branches); do
	echo "  $branch"
done
echo ""

echo "Local branches that have been squash-merged:"
list_squash_merged_branches
echo ""

if [ "$REMOTE" -eq 1 ]; then
	echo "Remote branches that have been merged:"
	for branch in $(list_merged_remote_branches); do
		echo "  $branch"
	done
	echo ""
fi

if [ "$DELETE" -eq 1 ]; then
	delete_local_branches
	if [ "$REMOTE" -eq 1 ]; then
		delete_remote_branches
	fi
fi
