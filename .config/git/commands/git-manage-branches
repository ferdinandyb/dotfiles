#!/bin/bash

echo "Running fetch --prune --all"
git fetch --prune --all
echo

DEFAULT_REMOTE=$(git rev-parse --abbrev-ref origin/HEAD)
DEFAULT_LOCAL=$(echo "$DEFAULT_REMOTE" | sed 's|^origin/||')

FORCE=0
REMOTE=0

delete_local_branches() {
	echo "Deleting local branches"
	echo ""
	echo "Removing branches with deleted remotes"
	echo

	STALE_BRANCHES=$(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}')
	for branch in $STALE_BRANCHES; do
		git branch -D $branch && echo "Deleted ${branch}"
	done

	echo "Removing merged branches"
	echo

	MERGED=$(git branch --merged origin/HEAD --format="%(refname:lstrip=2)" |
		grep --color=never -Ev "(${DEFAULT_LOCAL}|HEAD)")
	for branch in $MERGED; do
		git branch -D $branch && echo "Deleted ${branch}"
	done
}

delete_remote_branches() {
	echo "Deleting remote branches"
	echo ""

	echo "Removing merged branches"
	echo

	MERGED=$(git branch -r --merged origin/HEAD --format="%(refname:lstrip=3)" |
		grep --color=never -Ev "(${DEFAULT_LOCAL}|HEAD)")
	for branch in $MERGED; do
		git push origin -d $branch && echo "Deleted ${branch}"
	done

}

while getopts ":fr" option; do
	case $option in
	f) # delete branches
		FORCE=1
		;;
	r)
		REMOTE=1
		;;
	esac
done

echo "Branches with deleted remotes:"
git -c color.ui=always branch -vv | grep --color=never gone
echo ""

echo "Local branches that have been merged:"
git -c color.ui=always branch --merged origin/HEAD |
	grep --color=never -v $DEFAULT_LOCAL
echo ""

if [ "$REMOTE" -eq 1 ]; then
	echo "Remote branches that have been merged:"
	git -c color.ui=always branch -r --merged origin/HEAD |
		grep --color=never -Ev "(origin/${DEFAULT_LOCAL}|origin/HEAD)"
	echo ""
fi

if [ "$FORCE" -eq 1 ]; then
	delete_local_branches
	if [ "$REMOTE" -eq 1 ]; then
		delete_remote_branches
	fi
fi
